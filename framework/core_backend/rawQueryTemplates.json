{
  "queries": {
    "fetchMoviesByRangeASC": {
      "query": "SELECT movies.title, ROUND(AVG(ratings.rating), 2) AS avg_rating, COUNT(ratings.userid) AS review_count FROM movies JOIN ratings ON movies.movieid = ratings.movieid GROUP BY movies.movieid, movies.title HAVING AVG(ratings.rating) BETWEEN $1 AND $2 AND COUNT(ratings.userid) >= 2 ORDER BY avg_rating ASC LIMIT $3"
    },
    "fetchMoviesByRangeDESC": {
      "query": "SELECT movies.title, ROUND(AVG(ratings.rating), 2) AS avg_rating, COUNT(ratings.userid) AS review_count FROM movies JOIN ratings ON movies.movieid = ratings.movieid GROUP BY movies.movieid, movies.title HAVING AVG(ratings.rating) BETWEEN $1 AND $2 AND COUNT(ratings.userid) >= 2 ORDER BY avg_rating DESC LIMIT $3"
    },
    "fetchButtonStates": {
      "query": "SELECT (SELECT COUNT(*) FROM draft_storage) AS draft_count, (SELECT COUNT(*) FROM edit_draft) AS edit_count, (SELECT COUNT(*) FROM published_posts) AS published_count, (SELECT COUNT(*) FROM edit_draft) = 0 AS enable_add_post, (SELECT COUNT(*) FROM edit_draft) = 1 AS enable_save, (SELECT COUNT(*) FROM edit_draft) = 1 AS enable_publish, (SELECT COUNT(*) FROM edit_draft) = 1 AS enable_add_timestamp, (SELECT COUNT(*) FROM edit_draft) = 0 AND ((SELECT COUNT(*) FROM draft_storage) > 0 OR (SELECT COUNT(*) FROM published_posts) > 0) AS enable_edit_latest, (SELECT COUNT(*) FROM draft_storage) + (SELECT COUNT(*) FROM edit_draft) + (SELECT COUNT(*) FROM published_posts) > 0 AS enable_delete_all"
    },
    "validateActionAllowed": {
      "query": "SELECT CASE WHEN $1 = 'createPost' AND (SELECT COUNT(*) FROM edit_draft) = 0 THEN true WHEN $1 = 'moveToDrafts' AND (SELECT COUNT(*) FROM edit_draft) = 1 THEN true WHEN $1 = 'moveToPublished' AND (SELECT COUNT(*) FROM edit_draft) = 1 THEN true WHEN $1 = 'editLatestPost' AND (SELECT COUNT(*) FROM edit_draft) = 0 AND ((SELECT COUNT(*) FROM draft_storage) > 0 OR (SELECT COUNT(*) FROM published_posts) > 0) THEN true WHEN $1 = 'deleteAllPosts' AND (SELECT COUNT(*) FROM draft_storage) + (SELECT COUNT(*) FROM edit_draft) + (SELECT COUNT(*) FROM published_posts) > 0 THEN true ELSE false END AS allowed;"
    },
    "fetchDraftState": {
      "query": "SELECT (SELECT COUNT(*) FROM draft_storage) AS draft_count, (SELECT COUNT(*) FROM edit_draft) AS edit_count, (SELECT COUNT(*) FROM published_posts) AS published_count;"
    },
    "createPost": {
      "query": "INSERT INTO edit_draft (content) VALUES ('Your content... (to save or publish, it must be valid timestamp in this example)') RETURNING id, content;"
    },
    "saveBeforeMoving": {
      "query": "UPDATE edit_draft SET content = $1 WHERE id = $2;"
    },
    "moveToDrafts": {
      "query": "WITH moved AS (DELETE FROM edit_draft WHERE id = $1 RETURNING id, content, created_at, edited_at, is_active) INSERT INTO draft_storage (id, content, created_at, edited_at, is_active) SELECT id, content, created_at, COALESCE(edited_at, NOW()), is_active FROM moved RETURNING id;"
    },
    "moveToPublished": {
      "query": "WITH moved AS (DELETE FROM edit_draft WHERE id = $1 RETURNING id, content, created_at, edited_at, is_active) INSERT INTO published_posts (id, content, created_at, edited_at, is_active) SELECT id, content, created_at, COALESCE(edited_at, NOW()), is_active FROM moved RETURNING id;"
    },
    "fetchEditDraftPost": {
      "query": "SELECT id, content FROM edit_draft ORDER BY id DESC LIMIT 1;"
    },
    "deleteAllPosts": {
      "query": "SELECT delete_all_posts();"
    },
    "moveLatestPostToEditDraft": {
      "query": "WITH latest_post AS (SELECT id FROM (SELECT id, created_at FROM draft_storage UNION ALL SELECT id, created_at FROM published_posts) AS combined ORDER BY created_at DESC LIMIT 1), moved AS (DELETE FROM draft_storage WHERE id = (SELECT id FROM latest_post) RETURNING id, content, created_at, edited_at, is_active), moved_published AS (DELETE FROM published_posts WHERE id = (SELECT id FROM latest_post) RETURNING id, content, created_at, edited_at, is_active) INSERT INTO edit_draft (id, content, created_at, edited_at, is_active) SELECT id, content, created_at, COALESCE(edited_at, NOW()), is_active FROM moved UNION ALL SELECT id, content, created_at, COALESCE(edited_at, NOW()), is_active FROM moved_published RETURNING id, content;"
    },
    "fetchUserRelations": {
      "query": "SELECT u1.id AS user_id, u1.username, u2.id AS other_user_id, u2.username AS other_username, CASE WHEN i1.user_id IS NOT NULL AND r2.user_id IS NOT NULL THEN 'rejected_outbound' WHEN r1.user_id IS NOT NULL THEN 'block' WHEN i1.user_id IS NOT NULL AND i2.user_id IS NOT NULL THEN 'connection' WHEN i1.user_id IS NOT NULL THEN 'outbound' WHEN i2.user_id IS NOT NULL THEN 'inbound' ELSE 'none' END AS relation_type, CASE WHEN r2.user_id IS NOT NULL THEN 'blocked' ELSE 'not_blocked' END AS block_status FROM users u1 CROSS JOIN users u2 LEFT JOIN interests i1 ON i1.user_id = u1.id AND i1.interested_in = u2.id LEFT JOIN interests i2 ON i2.user_id = u2.id AND i2.interested_in = u1.id LEFT JOIN rejections r1 ON r1.user_id = u1.id AND r1.rejected_id = u2.id LEFT JOIN rejections r2 ON r2.user_id = u2.id AND r2.rejected_id = u1.id WHERE u1.id != u2.id;"
    },
    "fetchUserRelations2": {
      "query": "SELECT u1.id AS user_id, u1.username, u2.id AS other_user_id, u2.username AS other_username, CASE WHEN i1.user_id IS NOT NULL AND r2.user_id IS NOT NULL THEN 'rejected_outbound' WHEN r1.user_id IS NOT NULL THEN 'block' WHEN i1.user_id IS NOT NULL AND i2.user_id IS NOT NULL THEN 'connection' WHEN i1.user_id IS NOT NULL THEN 'outbound' WHEN i2.user_id IS NOT NULL THEN 'inbound' ELSE 'none' END AS relation_type, CASE WHEN r2.user_id IS NOT NULL THEN 'blocked' ELSE 'not_blocked' END AS block_status FROM users2 u1 CROSS JOIN users2 u2 LEFT JOIN interests2 i1 ON i1.user_id = u1.id AND i1.interested_in = u2.id LEFT JOIN interests2 i2 ON i2.user_id = u2.id AND i2.interested_in = u1.id LEFT JOIN rejections2 r1 ON r1.user_id = u1.id AND r1.rejected_id = u2.id LEFT JOIN rejections2 r2 ON r2.user_id = u2.id AND r2.rejected_id = u1.id WHERE u1.id != u2.id;"
    },
    "fetchUserRelations3": {
      "query": "SELECT u1.id AS user_id, u1.username, u2.id AS other_user_id, u2.username AS other_username, CASE WHEN i1.user_id IS NOT NULL AND r2.user_id IS NOT NULL THEN 'rejected_outbound' WHEN r1.user_id IS NOT NULL THEN 'block' WHEN i1.user_id IS NOT NULL AND i2.user_id IS NOT NULL THEN 'connection' WHEN i1.user_id IS NOT NULL THEN 'outbound' WHEN i2.user_id IS NOT NULL THEN 'inbound' ELSE 'none' END AS relation_type, CASE WHEN r2.user_id IS NOT NULL THEN 'blocked' ELSE 'not_blocked' END AS block_status FROM users3 u1 CROSS JOIN users3 u2 LEFT JOIN interests3 i1 ON i1.user_id = u1.id AND i1.interested_in = u2.id LEFT JOIN interests3 i2 ON i2.user_id = u2.id AND i2.interested_in = u1.id LEFT JOIN rejections3 r1 ON r1.user_id = u1.id AND r1.rejected_id = u2.id LEFT JOIN rejections3 r2 ON r2.user_id = u2.id AND r2.rejected_id = u1.id WHERE u1.id != u2.id;"
    },
    "fetchAccessPermissions": {
      "query": "SELECT u.username, s.space_name, CASE WHEN a.user_id IS NOT NULL THEN 'admin' WHEN p.user_with_access IS NOT NULL AND pl.granted_user IS NOT NULL THEN 'granted' ELSE 'denied' END AS access_status, CASE WHEN p.user_with_access IS NOT NULL AND pl.granted_user IS NOT NULL THEN true ELSE false END AS has_valid_permission_log FROM users_access u JOIN spaces s ON s.space_name = 'A1' LEFT JOIN admins a ON a.user_id = u.id AND a.owns_space = s.space_name LEFT JOIN permissions p ON p.user_with_access = u.id AND p.space = s.space_name LEFT JOIN permissions_log pl ON pl.granted_user = u.id AND pl.space = s.space_name WHERE u.username = 'A' OR u.username = 'B';"
    }
  },
  "querySequences": {
    "atomicMoveToDrafts": {
      "transaction": true,
      "steps": [
        { "queryKey": "saveBeforeMoving", "params": ["content", "id"] },
        { "queryKey": "moveToDrafts", "params": ["id"] }
      ]
    },
    "atomicMoveToPublished": {
      "transaction": true,
      "steps": [
        { "queryKey": "saveBeforeMoving", "params": ["content", "id"] },
        { "queryKey": "moveToPublished", "params": ["id"] }
      ]
    },
    "atomicMoveLatestToEditDraft": {
      "transaction": true,
      "steps": [
        { "queryKey": "moveLatestPostToEditDraft", "params": [] }
      ]
    }
  }
}